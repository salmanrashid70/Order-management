<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="75" failures="0" errors="0" time="3.96">
  <testsuite name="Database Utility (Unit Tests)" errors="0" failures="0" skipped="0" timestamp="2025-09-29T11:43:30" time="1.669" tests="9">
    <testcase classname="Database Utility (Unit Tests) should be a singleton" name="Database Utility (Unit Tests) should be a singleton" time="0.002">
    </testcase>
    <testcase classname="Database Utility (Unit Tests) uses MONGODB_URI when provided" name="Database Utility (Unit Tests) uses MONGODB_URI when provided" time="0.001">
    </testcase>
    <testcase classname="Database Utility (Unit Tests) should not reconnect if already connected" name="Database Utility (Unit Tests) should not reconnect if already connected" time="0">
    </testcase>
    <testcase classname="Database Utility (Unit Tests) should handle connection failure" name="Database Utility (Unit Tests) should handle connection failure" time="0.005">
    </testcase>
    <testcase classname="Database Utility (Unit Tests) should disconnect from the database" name="Database Utility (Unit Tests) should disconnect from the database" time="0.001">
    </testcase>
    <testcase classname="Database Utility (Unit Tests) should ignore disconnect when already disconnected" name="Database Utility (Unit Tests) should ignore disconnect when already disconnected" time="0">
    </testcase>
    <testcase classname="Database Utility (Unit Tests) should handle MongoDB error event" name="Database Utility (Unit Tests) should handle MongoDB error event" time="0">
    </testcase>
    <testcase classname="Database Utility (Unit Tests) should handle MongoDB disconnected event" name="Database Utility (Unit Tests) should handle MongoDB disconnected event" time="0">
    </testcase>
    <testcase classname="Database Utility (Unit Tests) should handle SIGINT for graceful shutdown" name="Database Utility (Unit Tests) should handle SIGINT for graceful shutdown" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="OrderService - Unit Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-29T11:43:30" time="1.758" tests="11">
    <testcase classname="OrderService - Unit Tests createOrder should create order successfully with valid data" name="OrderService - Unit Tests createOrder should create order successfully with valid data" time="0.015">
    </testcase>
    <testcase classname="OrderService - Unit Tests createOrder should throw DatabaseError on save failure" name="OrderService - Unit Tests createOrder should throw DatabaseError on save failure" time="0.021">
    </testcase>
    <testcase classname="OrderService - Unit Tests getOrderById should return order details for a valid order ID" name="OrderService - Unit Tests getOrderById should return order details for a valid order ID" time="0.002">
    </testcase>
    <testcase classname="OrderService - Unit Tests getOrderById should throw NotFoundError if order does not exist" name="OrderService - Unit Tests getOrderById should throw NotFoundError if order does not exist" time="0.001">
    </testcase>
    <testcase classname="OrderService - Unit Tests getOrderById should throw DatabaseError on DB failure" name="OrderService - Unit Tests getOrderById should throw DatabaseError on DB failure" time="0.001">
    </testcase>
    <testcase classname="OrderService - Unit Tests getOrdersByUserId should return paginated orders for a valid user" name="OrderService - Unit Tests getOrdersByUserId should return paginated orders for a valid user" time="0.002">
    </testcase>
    <testcase classname="OrderService - Unit Tests getOrdersByUserId should return empty array when user has no orders" name="OrderService - Unit Tests getOrdersByUserId should return empty array when user has no orders" time="0">
    </testcase>
    <testcase classname="OrderService - Unit Tests getOrdersByUserId should handle pagination correctly for multiple pages" name="OrderService - Unit Tests getOrdersByUserId should handle pagination correctly for multiple pages" time="0.002">
    </testcase>
    <testcase classname="OrderService - Unit Tests getOrdersByUserId should use default pagination values when not provided" name="OrderService - Unit Tests getOrdersByUserId should use default pagination values when not provided" time="0.001">
    </testcase>
    <testcase classname="OrderService - Unit Tests getOrdersByUserId should throw DatabaseError on database failure" name="OrderService - Unit Tests getOrdersByUserId should throw DatabaseError on database failure" time="0.001">
    </testcase>
    <testcase classname="OrderService - Unit Tests getOrdersByUserId should handle edge case with zero limit" name="OrderService - Unit Tests getOrdersByUserId should handle edge case with zero limit" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Logger Utility" errors="0" failures="0" skipped="0" timestamp="2025-09-29T11:43:30" time="1.878" tests="6">
    <testcase classname="Logger Utility Logs info message" name="Logger Utility Logs info message" time="0.007">
    </testcase>
    <testcase classname="Logger Utility Logs error message" name="Logger Utility Logs error message" time="0.029">
    </testcase>
    <testcase classname="Logger Utility Logs error with stack trace" name="Logger Utility Logs error with stack trace" time="0.013">
    </testcase>
    <testcase classname="Logger Utility Include timestamp and default metadata" name="Logger Utility Include timestamp and default metadata" time="0.002">
    </testcase>
    <testcase classname="Logger Utility Adds console transport in non-production" name="Logger Utility Adds console transport in non-production" time="0.013">
    </testcase>
    <testcase classname="Logger Utility Does not add console transport in production" name="Logger Utility Does not add console transport in production" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="OrderController - getOrder Unit Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-29T11:43:30" time="1.911" tests="18">
    <testcase classname="OrderController - getOrder Unit Tests Successful Order Retrieval should return order successfully with valid order ID" name="OrderController - getOrder Unit Tests Successful Order Retrieval should return order successfully with valid order ID" time="0.004">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Successful Order Retrieval should return order with different statuses" name="OrderController - getOrder Unit Tests Successful Order Retrieval should return order with different statuses" time="0.001">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Successful Order Retrieval should handle order with completed payment status" name="OrderController - getOrder Unit Tests Successful Order Retrieval should handle order with completed payment status" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Order Not Found Scenarios should return 404 when order does not exist" name="OrderController - getOrder Unit Tests Order Not Found Scenarios should return 404 when order does not exist" time="0.001">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Order Not Found Scenarios should handle various invalid order ID formats" name="OrderController - getOrder Unit Tests Order Not Found Scenarios should handle various invalid order ID formats" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Database and Technical Errors should handle database connection errors" name="OrderController - getOrder Unit Tests Database and Technical Errors should handle database connection errors" time="0.001">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Database and Technical Errors should handle database query errors" name="OrderController - getOrder Unit Tests Database and Technical Errors should handle database query errors" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Database and Technical Errors should handle unexpected errors gracefully" name="OrderController - getOrder Unit Tests Database and Technical Errors should handle unexpected errors gracefully" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Database and Technical Errors should handle network timeout errors" name="OrderController - getOrder Unit Tests Database and Technical Errors should handle network timeout errors" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Edge Cases and Boundary Conditions should handle very long order IDs" name="OrderController - getOrder Unit Tests Edge Cases and Boundary Conditions should handle very long order IDs" time="0.001">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Edge Cases and Boundary Conditions should handle order with maximum allowed data size" name="OrderController - getOrder Unit Tests Edge Cases and Boundary Conditions should handle order with maximum allowed data size" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Edge Cases and Boundary Conditions should handle concurrent requests for same order ID" name="OrderController - getOrder Unit Tests Edge Cases and Boundary Conditions should handle concurrent requests for same order ID" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Security and Validation Edge Cases should handle SQL injection attempts in order ID" name="OrderController - getOrder Unit Tests Security and Validation Edge Cases should handle SQL injection attempts in order ID" time="0.001">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Security and Validation Edge Cases should handle order IDs with special characters" name="OrderController - getOrder Unit Tests Security and Validation Edge Cases should handle order IDs with special characters" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Security and Validation Edge Cases should handle undefined or null order ID" name="OrderController - getOrder Unit Tests Security and Validation Edge Cases should handle undefined or null order ID" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Performance and Behavior Cases should call service exactly once per request" name="OrderController - getOrder Unit Tests Performance and Behavior Cases should call service exactly once per request" time="0">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Performance and Behavior Cases should not modify the original request object" name="OrderController - getOrder Unit Tests Performance and Behavior Cases should not modify the original request object" time="0.001">
    </testcase>
    <testcase classname="OrderController - getOrder Unit Tests Performance and Behavior Cases should return consistent response format for all cases" name="OrderController - getOrder Unit Tests Performance and Behavior Cases should return consistent response format for all cases" time="0">
    </testcase>
  </testsuite>
  <testsuite name="OrderController - createOrder Unit Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-29T11:43:30" time="2.082" tests="24">
    <testcase classname="OrderController - createOrder Unit Tests Successful Order Creation should create order successfully with valid data" name="OrderController - createOrder Unit Tests Successful Order Creation should create order successfully with valid data" time="0.003">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Successful Order Creation should handle payment method: credit_card" name="OrderController - createOrder Unit Tests Successful Order Creation should handle payment method: credit_card" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Successful Order Creation should handle payment method: debit_card" name="OrderController - createOrder Unit Tests Successful Order Creation should handle payment method: debit_card" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Successful Order Creation should handle payment method: paypal" name="OrderController - createOrder Unit Tests Successful Order Creation should handle payment method: paypal" time="0.001">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Successful Order Creation should handle payment method: bank_transfer" name="OrderController - createOrder Unit Tests Successful Order Creation should handle payment method: bank_transfer" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Successful Order Creation should handle order with optional fields" name="OrderController - createOrder Unit Tests Successful Order Creation should handle order with optional fields" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Schema Validation Errors should return 400 when schema validation fails with empty user ID" name="OrderController - createOrder Unit Tests Schema Validation Errors should return 400 when schema validation fails with empty user ID" time="0.001">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Schema Validation Errors should return 400 when items array is empty" name="OrderController - createOrder Unit Tests Schema Validation Errors should return 400 when items array is empty" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Schema Validation Errors should return 400 when required shipping address fields are missing" name="OrderController - createOrder Unit Tests Schema Validation Errors should return 400 when required shipping address fields are missing" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Schema Validation Errors should return 400 when item quantity is invalid" name="OrderController - createOrder Unit Tests Schema Validation Errors should return 400 when item quantity is invalid" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Business Logic Errors from Service should return 422 when product is out of stock" name="OrderController - createOrder Unit Tests Business Logic Errors from Service should return 422 when product is out of stock" time="0.001">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Business Logic Errors from Service should return 422 when user has insufficient funds" name="OrderController - createOrder Unit Tests Business Logic Errors from Service should return 422 when user has insufficient funds" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Business Logic Errors from Service should return 422 when product price has changed" name="OrderController - createOrder Unit Tests Business Logic Errors from Service should return 422 when product price has changed" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Database and Technical Errors should return 500 when database connection fails" name="OrderController - createOrder Unit Tests Database and Technical Errors should return 500 when database connection fails" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Database and Technical Errors should return 500 when unexpected error occurs" name="OrderController - createOrder Unit Tests Database and Technical Errors should return 500 when unexpected error occurs" time="0.001">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Database and Technical Errors should return 500 when database unique constraint fails" name="OrderController - createOrder Unit Tests Database and Technical Errors should return 500 when database unique constraint fails" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Edge Cases and Boundary Conditions should handle very large quantity values" name="OrderController - createOrder Unit Tests Edge Cases and Boundary Conditions should handle very large quantity values" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Edge Cases and Boundary Conditions should handle decimal prices correctly" name="OrderController - createOrder Unit Tests Edge Cases and Boundary Conditions should handle decimal prices correctly" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Edge Cases and Boundary Conditions should handle empty request body" name="OrderController - createOrder Unit Tests Edge Cases and Boundary Conditions should handle empty request body" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Security and Validation Edge Cases should handle malformed JSON in request body" name="OrderController - createOrder Unit Tests Security and Validation Edge Cases should handle malformed JSON in request body" time="0.001">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Security and Validation Edge Cases should handle extremely long field values" name="OrderController - createOrder Unit Tests Security and Validation Edge Cases should handle extremely long field values" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Behavior and Integration Points should not call service when validation fails" name="OrderController - createOrder Unit Tests Behavior and Integration Points should not call service when validation fails" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Behavior and Integration Points should call service with exact validated data" name="OrderController - createOrder Unit Tests Behavior and Integration Points should call service with exact validated data" time="0">
    </testcase>
    <testcase classname="OrderController - createOrder Unit Tests Behavior and Integration Points should maintain consistent response format across all scenarios" name="OrderController - createOrder Unit Tests Behavior and Integration Points should maintain consistent response format across all scenarios" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="OrderModel - Schema Validation" errors="0" failures="0" skipped="0" timestamp="2025-09-29T11:43:30" time="3.47" tests="7">
    <testcase classname="OrderModel - Schema Validation Schema Defaults should apply default values correctly" name="OrderModel - Schema Validation Schema Defaults should apply default values correctly" time="0.074">
    </testcase>
    <testcase classname="OrderModel - Schema Validation Schema Defaults should auto-generate order number" name="OrderModel - Schema Validation Schema Defaults should auto-generate order number" time="0.029">
    </testcase>
    <testcase classname="OrderModel - Schema Validation Schema Validation should require essential fields" name="OrderModel - Schema Validation Schema Validation should require essential fields" time="0.002">
    </testcase>
    <testcase classname="OrderModel - Schema Validation Schema Validation should validate item quantity is positive" name="OrderModel - Schema Validation Schema Validation should validate item quantity is positive" time="0.002">
    </testcase>
    <testcase classname="OrderModel - Schema Validation Schema Validation should validate prices are non-negative" name="OrderModel - Schema Validation Schema Validation should validate prices are non-negative" time="0.001">
    </testcase>
    <testcase classname="OrderModel - Schema Validation Schema Validation should validate enum values" name="OrderModel - Schema Validation Schema Validation should validate enum values" time="0.002">
    </testcase>
    <testcase classname="OrderModel - Schema Validation toJSON Transformation should transform document correctly" name="OrderModel - Schema Validation toJSON Transformation should transform document correctly" time="0.011">
    </testcase>
  </testsuite>
</testsuites>